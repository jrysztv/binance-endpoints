name: Security & Dependencies

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.8.0'

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi
        
    - name: Check for security vulnerabilities
      continue-on-error: true
      run: |
        # Install safety for security scanning
        poetry add --group dev safety
        poetry run safety check --json || echo "Security vulnerabilities found"
        
    - name: Check for outdated dependencies
      run: |
        echo "üîç Checking for outdated dependencies..."
        poetry show --outdated || echo "All dependencies are up to date"
        
    - name: Docker security scan
      continue-on-error: true
      run: |
        # Build image for security scanning
        docker build -t binance-endpoints:security-scan .
        
        # Use trivy for container scanning (if available)
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image binance-endpoints:security-scan || echo "Container scan completed"
          
  dependency-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Update dependencies
      run: |
        # Update dependencies
        poetry update
        
    - name: Run tests with updated dependencies
      run: |
        poetry install --no-interaction --no-ansi
        poetry run pytest tests/ -v
        
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies"
        title: "üîÑ Automated dependency update"
        body: |
          This PR contains automated dependency updates.
          
          Please review the changes and ensure all tests pass before merging.
          
          - Updated poetry.lock with latest compatible versions
          - All tests passed with updated dependencies
        branch: automated-dependency-update
        delete-branch: true 