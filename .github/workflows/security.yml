name: Security & Dependencies

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.8.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-audit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi
        
    - name: Check for security vulnerabilities
      continue-on-error: true
      run: |
        # Install safety for security scanning
        poetry add --group dev safety
        poetry run safety check --json || echo "Security vulnerabilities found"
        
    - name: Check for outdated dependencies
      run: |
        echo "üîç Checking for outdated dependencies..."
        poetry show --outdated || echo "All dependencies are up to date"
        
    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}
        
    - name: Docker security scan
      continue-on-error: true
      run: |
        # Check if GHCR image exists and scan it, otherwise build and scan locally
        if docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest 2>/dev/null; then
          echo "üîç Scanning existing GHCR image..."
          SCAN_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        else
          echo "üîç GHCR image not found, building locally for security scan..."
          docker build -t binance-endpoints:security-scan .
          SCAN_IMAGE="binance-endpoints:security-scan"
        fi
        
        # Use trivy for container scanning
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image --format json --output trivy-results.json $SCAN_IMAGE || echo "Container scan completed"
          
        # Display summary
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image --format table $SCAN_IMAGE || echo "Security scan summary displayed"
          
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results-${{ github.run_number }}
        path: |
          trivy-results.json
        retention-days: 30
          
  dependency-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Update dependencies
      run: |
        # Update dependencies
        poetry update
        
    - name: Run tests with updated dependencies
      run: |
        poetry install --no-interaction --no-ansi
        poetry run pytest tests/ -v
        
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies"
        title: "üîÑ Automated dependency update"
        body: |
          This PR contains automated dependency updates.
          
          Please review the changes and ensure all tests pass before merging.
          
          - Updated poetry.lock with latest compatible versions
          - All tests passed with updated dependencies
        branch: automated-dependency-update
        delete-branch: true 